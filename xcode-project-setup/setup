#!/bin/bash


echo "# # # # #"

# # # # # # # # # # # # #
# Save given projectname
if [[ ! -e ".projectname" ]];
then 
    if [[ "$#" -ne 1 ]]; 
    then
        echo "Illegal number of parameters. Provide only the name of your Xcode-project-file (without extension)."
        exit 1
    else
        {
            echo "$1"
        } > ".projectname"
    fi
elif [[ "$#" -eq 1 ]];
then
    read -r -p "Do you want to update the saved project-name to '$1'? [y/N] " RESPONSE
    case $RESPONSE in
        [yY][eE][sS]|[yY]) 
            {
                echo "$1"
            } > ".projectname"
            ;;
    esac
    echo "# # #"
fi
#
# # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # #
# Load projectname from .projectname file
PROJECTNAME=$(head -n 1 .projectname)
#
# # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # #
# Initializing git repo
git init
#
# # # # # # # # # # # #


echo "# # #"


# # # # # # # # # # # # # # # # # # # # #
# Write projectname to .ruby-gemset file
echo "$PROJECTNAME" > ".ruby-gemset"
#
# # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # #
# Check for rvm, install if necessary
echo "Checking for rvm installation..."
RVM_TYPE_OUTPUT=$( (type rvm | head -1) 2>&1 )

if [[ $RVM_TYPE_OUTPUT = "rvm is a function" ]];
then
    echo "rvm is installed"
else 
    echo "rvm is not installed. Please install rvm before using this script. For instructions on installing rvm, visit https://rvm.io/rvm/install"
    exit 1
fi
#
# # # # # # # # # # # # # # # # # # #


echo "# # #"


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Use/Install ruby as specified in .ruby-version and .ruby-gemset
rvm use "$(cat '.ruby-version')@$(cat '.ruby-gemset')" --create --install
#
# # # # # # # # # # # # # # # # #


echo "# # #"


# # # # # # # # #
# Install bundler
echo "Checking for bundler installation..."
GEM_SPEC_BUNDLER_OUTPUT=$( (gem spec bundler) 2>&1 )
GEM_NOT_FOUND=${GEM_SPEC_BUNDLER_OUTPUT::5}
if [[ $GEM_NOT_FOUND = "ERROR" ]];
then
    echo "bundler is not installed."
    echo "Installing bundler..."
    gem install bundler
else
    echo "bundler is already installed."
fi
#
# # # # # # # # #


echo "# # #"


# # # # # # # # # # #
# Run bundle install
echo "Installing Gems..."
bundle install
#
# # # # # # # # # # #


echo "# # #"


# # # # # # # # #
# Run pod install
echo "Initializing and installing Pods..."
pod init
pod install
#
# # # # # # # # #


echo "# # #"


# # # # # # # # # #
# Install git hooks
mkdir -p ".git/hooks/"
echo "Installing git hooks..."

echo "Installing pre-push hook..."
{
    echo "#!/bin/bash"
    echo ""
    echo "./scripts/pre-push"
} > ".git/hooks/pre-push"

chmod +x ".git/hooks/pre-push"

echo "Installing post-merge hook..."
{
    echo "#!/bin/bash"
    echo ""
    echo "./scripts/post-merge"
} > ".git/hooks/post-merge"

chmod +x ".git/hooks/post-merge"
#
# # # # # # # # # #


echo "# # #"


# # # # # # # # # # #
# Maybe committing changes
read -r -p "Do you want to commit the changes induced by setup? [y/N] " RESPONSE
case $RESPONSE in
    [yY][eE][sS]|[yY]) 
        git add .
        git commit -m "[setup-script] Run setup"
        ;;
esac
#
# # # # # # # # # # #


echo "# # #"


echo "Done. Have fun!"
echo "# # # # #"

