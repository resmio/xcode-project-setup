#!/bin/bash

RUBY_VERSION='2.5.1'


echo "# # # # #"

# # # # # # # # # # # # #
# Save given projectname
if [[ ! -e ".projectname" ]];
then 
    if [[ "$#" -ne 1 ]]; 
    then
        echo "Illegal number of parameters. Provide the name of your Xcode-project-file (without extension)."
        exit 1
    else
        {
            echo "$1"
        } > ".projectname"
    fi
elif [[ "$#" -eq 1 ]];
then
    read -r -p "Do you want to update the saved project-name to '$1'? [y/N] " RESPONSE
    case $RESPONSE in
        [yY][eE][sS]|[yY]) 
            {
                echo "$1"
            } > ".projectname"
            ;;
    esac
    echo "# # #"
fi
#
# # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # #
# Load projectname from .projectname file
PROJECTNAME=$(head -n 1 .projectname)
#
# # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # #
# Check for rvm, abort if not installed
echo "Checking for rvm installation..."
RVM_TYPE_OUTPUT=$( (type rvm | head -1) 2>&1 )

if [[ $RVM_TYPE_OUTPUT = "rvm is a function" ]];
then
    echo "rvm is installed"
else 
    echo "rvm is not installed. Please install rvm before using this script. For instructions on installing rvm, visit https://rvm.io/rvm/install"
    exit 1
fi
#
# # # # # # # # # # # # # # # # # # #


echo "# # #"


# # # # # # # # # # # #
# Initialize git repo
git init
#
# # # # # # # # # # # #


# # # # # # # # # # # #
# Create .gitattributes file
echo "*.pbxproj merge=union" > ".gitattributes"
#
# # # # # # # # # # # #


# # # # # # # # # # # #
# Create .gitignore file
cat <<EOF > ".gitignore"
#########################
# .gitignore file for Xcode4 / OS X Source projects
#
# Version 2.0
#    For latest version, see: http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects
#
# 2013 updates:
#    - fixed the broken "save personal Schemes"
#
# NB: if you are storing "built" products, this WILL NOT WORK,
#   and you should use a different .gitignore (or none at all)
# This file is for SOURCE projects, where there are many extra
#   files that we want to exclude
#
#########################
 
#####
# OS X temporary files that should never be committed
 
.DS_Store
*.swp
#profile
 
 
####
# Xcode temporary files that should never be committed
# 
# NB: NIB/XIB files still exist even on Storyboard projects, so we want this...
 
*~.nib
 
 
####
# Xcode build files -
#
# NB: slash on the end, so we only remove the FOLDER, not any files that were badly named "DerivedData"
 
DerivedData/
 
# NB: slash on the end, so we only remove the FOLDER, not any files that were badly named "build"
 
build/
 
 
#####
# Xcode private settings (window sizes, bookmarks, breakpoints, custom executables, smart groups)
#
# This is complicated:
#
# SOMETIMES you need to put this file in version control.
# Apple designed it poorly - if you use "custom executables", they are
#  saved in this file.
# 99% of projects do NOT use those, so they do NOT want to version control this file.
#  ..but if you're in the 1%, comment out the line "*.pbxuser"
 
*.pbxuser
*.mode1v3
*.mode2v3
*.perspectivev3
#    NB: also, whitelist the default ones, some projects need to use these
!default.pbxuser
!default.mode1v3
!default.mode2v3
!default.perspectivev3
 
 
####
# Xcode 4 - semi-personal settings
#
#
# OPTION 1: ---------------------------------
#     throw away ALL personal settings (including custom schemes!
#     - unless they are "shared")
#
# NB: this is exclusive with OPTION 2 below
xcuserdata
 
# OPTION 2: ---------------------------------
#     get rid of ALL personal settings, but KEEP SOME OF THEM
#     - NB: you must manually uncomment the bits you want to keep
#
# NB: this is exclusive with OPTION 1 above
#
#xcuserdata/**/*
 
#     (requires option 2 above): Personal Schemes
#
#!xcuserdata/**/xcschemes/*
 
####
# XCode 4 workspaces - more detailed
#
# Workspaces are important! They are a core feature of Xcode - don't exclude them :)
#
# Workspace layout is quite spammy. For reference:
#
# /(root)/
#   /(project-name).xcodeproj/
#     project.pbxproj
#     /project.xcworkspace/
#       contents.xcworkspacedata
#       /xcuserdata/
#         /(your name)/xcuserdatad/
#           UserInterfaceState.xcuserstate
#     /xcsshareddata/
#       /xcschemes/
#         (shared scheme name).xcscheme
#     /xcuserdata/
#       /(your name)/xcuserdatad/
#         (private scheme).xcscheme
#         xcschememanagement.plist
#
#
 
####
# Xcode 4 - Deprecated classes
#
# Allegedly, if you manually "deprecate" your classes, they get moved here.
#
# We're using source-control, so this is a "feature" that we do not want!
 
*.moved-aside

####
# XCode - Blueprint
#
*.xcscmblueprint

###
# AppCode internal files

.idea/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
Pods/
 
 
####
# UNKNOWN: recommended by others, but I can't discover what these files are
#
# ...none. Everything is now explained.
EOF
#
# # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # #
# Write projectname to .ruby-gemset file
echo "$PROJECTNAME" > ".ruby-gemset"
#
# # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # #
# Write RUBY_VERSION to .ruby-version file
echo "$RUBY_VERSION" > ".ruby-version"
#
# # # # # # # # # # # # # # # # # # # # #


echo "# # #"


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Use/Install ruby as specified in .ruby-version and .ruby-gemset
rvm use "$(cat '.ruby-version')@$(cat '.ruby-gemset')" --create --install
#
# # # # # # # # # # # # # # # # #


echo "# # #"


# # # # # # # # #
# Install bundler
echo "Checking for bundler installation..."
GEM_SPEC_BUNDLER_OUTPUT=$( (gem spec bundler) 2>&1 )
GEM_NOT_FOUND=${GEM_SPEC_BUNDLER_OUTPUT::5}
if [[ $GEM_NOT_FOUND = "ERROR" ]];
then
    echo "bundler is not installed."
    echo "Installing bundler..."
    gem install bundler
else
    echo "bundler is already installed."
fi
#
# # # # # # # # #


echo "# # #"


# # # # # # # # # # #
# Run bundle install
echo "Installing Gems..."
bundle install
#
# # # # # # # # # # #


echo "# # #"


# # # # # # # # #
# Run pod install
echo "Initializing and installing Pods..."
pod init
pod install
#
# # # # # # # # #


echo "# # #"


# # # # # # # # # #
# Install git hooks
mkdir -p ".git/hooks/"
echo "Installing git hooks..."

echo "Installing pre-push hook..."
{
    echo "#!/bin/bash"
    echo ""
    echo "./scripts/pre-push"
} > ".git/hooks/pre-push"

chmod +x ".git/hooks/pre-push"

echo "Installing post-merge hook..."
{
    echo "#!/bin/bash"
    echo ""
    echo "./scripts/post-merge"
} > ".git/hooks/post-merge"

chmod +x ".git/hooks/post-merge"
#
# # # # # # # # # #


echo "# # #"


# # # # # # # # # # #
# Maybe committing changes
read -r -p "Do you want to commit the changes induced by setup? [y/N] " RESPONSE
case $RESPONSE in
    [yY][eE][sS]|[yY]) 
        git add .
        git commit -m "[setup-script] Run setup"
        ;;
esac
#
# # # # # # # # # # #


echo "# # #"


echo "Done. Have fun!"
echo "# # # # #"

